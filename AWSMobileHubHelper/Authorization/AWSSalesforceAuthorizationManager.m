//
//  AWSSalesforceAuthorizationManager.m
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//

#import "AWSSalesforceAuthorizationManager.h"
#import <AWSCore/AWSCore.h>

typedef void (^AWSCompletionBlock)(id result, NSError *error);

static NSString *const AWSSalesforceAuthorizationManagerAuthorizeURLString = @"https://login.salesforce.com/services/oauth2/authorize";
static NSString *const AWSSalesforceAuthorizationManagerTokenURLString = @"https://login.salesforce.com/services/oauth2/token";
static NSString *const AWSSalesforceAuthorizationManagerLogoutURLPostfix = @"/secur/logout.jsp";

static NSString *const AWSSalesforceAuthorizationManagerInstanceURLKey = @"instance_url";
static NSString *const AWSSalesforceAuthorizationManagerTokenTypeKey = @"token_type";
static NSString *const AWSSalesforceAuthorizationManagerAccessTokenKey = @"access_token";

@interface AWSAuthorizationManager()

- (void)completeLoginWithResult:(id)result
                          error:(NSError *)error;
- (void)clearAccessToken;

@end

@interface AWSSalesforceAuthorizationManager()

@property (strong, nonatomic) NSString *clientID;
@property (strong, nonatomic) NSString *redirectURI;

@property (strong, nonatomic) NSDictionary *valuesFromResponse;

@end

@implementation AWSSalesforceAuthorizationManager

+ (instancetype)sharedInstance {
    static AWSSalesforceAuthorizationManager *_sharedInstance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _sharedInstance = [[AWSSalesforceAuthorizationManager alloc] init];
    });
    
    return _sharedInstance;
}

- (instancetype)init {
    if (self = [super init]) {
        NSDictionary *config = [[[AWSInfo defaultAWSInfo].rootInfoDictionary objectForKey:@"SaaS"] objectForKey:@"Salesforce"];
        _clientID = [config objectForKey:@"ClientID"];
        _redirectURI = [config objectForKey:@"RedirectURI"];
        
        return self;
    }
    return nil;
}

- (void)configureWithClientID:(NSString *)clientID
                  redirectURI:(NSString *)redirectURI {
    self.clientID = clientID;
    self.redirectURI = redirectURI;
}

- (NSString *)getInstanceURL {
    return self.valuesFromResponse[AWSSalesforceAuthorizationManagerInstanceURLKey];
}

- (NSString *)getTokenType {
    return self.valuesFromResponse[AWSSalesforceAuthorizationManagerTokenTypeKey];
}

#pragma mark - Override Custom Methods

- (BOOL)usesImplicitGrant {
    return YES;
}

- (NSURL *)generateAuthURL {
    NSMutableString *missingParams = [NSMutableString new];
    
    if ([self.clientID length] == 0) {
        [missingParams appendString:@"clientID "];
    }
    
    if ([self.redirectURI length] == 0) {
        [missingParams appendString:@"redirectURI "];
    }
    
    if ([missingParams length] > 0) {
        NSString *message = [NSString stringWithFormat:@"Missing parameter(s): %@", missingParams];
        [self completeLoginWithResult:nil error:[NSError errorWithDomain:AWSAuthorizationManagerErrorDomain
                                                                    code:AWSAuthorizationErrorMissingRequiredParameter
                                                                userInfo:@{@"message": message}]];
    }
    
    NSDictionary *params = @{@"client_id" : self.clientID,
                             @"response_type" : @"token",
                             @"redirect_uri" : [self.redirectURI stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLHostAllowedCharacterSet]],
                             };
    
    NSString *urlString = [NSString stringWithFormat:@"%@?%@", AWSSalesforceAuthorizationManagerAuthorizeURLString, [AWSAuthorizationManager constructURIWithParameters:params]];
    
    return [NSURL URLWithString:urlString];
}

- (NSString *)findAccessCode:(NSURL *)url {
    NSString *urlHeadRemoved = [[url absoluteString] stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"%@#", self.redirectURI] withString:@""];
    self.valuesFromResponse = [AWSAuthorizationManager constructParametersWithURI:urlHeadRemoved];
    
    return [self.valuesFromResponse objectForKey:AWSSalesforceAuthorizationManagerAccessTokenKey];
}

- (NSString *)getAccessTokenUsingAuthorizationCode:(NSString *)authorizationCode
                            loginCompletionHandler:(AWSCompletionBlock)loginCompletionHandler {
    NSDictionary *params = @{@"grant_type" : @"authorization_code",
                             @"code" : authorizationCode,
                             @"client_id" : self.clientID,
                             @"redirect_uri" : self.redirectURI,
                             };
    
    NSString *post = [AWSAuthorizationManager constructURIWithParameters:params];
    
    NSData *postData = [post dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];
    NSString *postLength = [NSString stringWithFormat:@"%lu", (unsigned long)[postData length]];
    
    NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init];
    [request setURL:[NSURL URLWithString:AWSSalesforceAuthorizationManagerTokenURLString]];
    [request setHTTPMethod:@"POST"];
    [request setValue:postLength forHTTPHeaderField:@"Content-Length"];
    [request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
    [request setHTTPBody:postData];
    
    __weak AWSSalesforceAuthorizationManager *weakSelf = self;
    
    NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
        if (error) {
            [weakSelf completeLoginWithResult:nil error:error];
            return;
        }
        
        NSError *parseError;
        weakSelf.valuesFromResponse = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];
        
        if ([[weakSelf.valuesFromResponse objectForKey:AWSSalesforceAuthorizationManagerAccessTokenKey] length] == 0) {
            [weakSelf completeLoginWithResult:nil error:[NSError errorWithDomain:AWSAuthorizationManagerErrorDomain
                                                                            code:AWSAuthorizationErrorFailedToRetrieveAccessToken
                                                                        userInfo:@{@"response": weakSelf.valuesFromResponse,
                                                                                   @"parseError": parseError}]];
        }
        
        [weakSelf completeLoginWithResult:[weakSelf.valuesFromResponse objectForKey:AWSSalesforceAuthorizationManagerAccessTokenKey] error:parseError];
    }];
    [task resume];
    
    return nil;
}

- (BOOL)isAcceptedURL:(NSURL *)url {
    return [[url absoluteString] hasPrefix:self.redirectURI];
}

- (NSURL *)generateLogoutURL {
    NSString *logoutURLString = [NSString stringWithFormat:@"%@%@", [self getInstanceURL], AWSSalesforceAuthorizationManagerLogoutURLPostfix];
    AWSLogVerbose(@"Logout: %@", logoutURLString);
    return [NSURL URLWithString:logoutURLString];
}

- (void)clearAccessToken {
    [super clearAccessToken];
    self.valuesFromResponse = nil;
}

@end
