//
//  AWSMarketoAuthorizationManager.m
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//

#import "AWSMarketoAuthorizationManager.h"
#import <AWSCore/AWSCore.h>

static NSString *const AWSMarketoAuthorizationManagerAccessTokenKey = @"access_token";
static NSString *const AWSMarketoAuthorizationManagerTokenTypeKey = @"token_type";

typedef void (^AWSCompletionBlock)(id result, NSError *error);

@interface AWSAuthorizationManager()

@property (strong, nonatomic) AWSCompletionBlock loginCompletionHandler;
@property (strong, nonatomic) AWSCompletionBlock logoutCompletionHandler;
@property (strong, nonatomic) AWSCompletionBlock refreshCompletionHandler;

@property (strong, nonatomic) NSString *accessToken;

- (void)completeLoginWithResult:(id)result
                          error:(NSError *)error;

- (void)clearAccessToken;

@end

@interface AWSMarketoAuthorizationManager()

@property (strong, nonatomic, getter=getIdentityURI) NSString *identityURI;
@property (strong, nonatomic, getter=getRestApiURI) NSString *restApiURI;
@property (strong, nonatomic, setter=setClientID:) NSString *clientID;
@property (strong, nonatomic, setter=setClientSecret:) NSString *clientSecret;

@property (strong, nonatomic) NSDictionary *valuesFromResponse;

@end

@implementation AWSMarketoAuthorizationManager

+ (instancetype)sharedInstance {
    static AWSMarketoAuthorizationManager *_sharedInstance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _sharedInstance = [[AWSMarketoAuthorizationManager alloc] init];
    });
    
    return _sharedInstance;
}

- (instancetype)init {
    if (self = [super init]) {
        NSDictionary *config = [[[AWSInfo defaultAWSInfo].rootInfoDictionary objectForKey:@"SaaS"] objectForKey:@"Marketo"];
        [self configureWithIdentityURI:[config objectForKey:@"IdentityURI"]
                            restApiURI:[config objectForKey:@"RestAPIURI"]];
        
        return self;
    }
    return nil;
}

- (void)configureWithIdentityURI:(NSString *)identityURI
                      restApiURI:(NSString *)restApiURI {
    self.identityURI = identityURI;
    self.restApiURI = restApiURI;
}

#pragma mark - Override Custom Methods

- (BOOL)usesImplicitGrant {
    return YES;
}

- (NSString *)getAccessToken {
    return [self.valuesFromResponse objectForKey:AWSMarketoAuthorizationManagerAccessTokenKey];
}

- (NSString *)getTokenType {
    return [self.valuesFromResponse objectForKey:AWSMarketoAuthorizationManagerTokenTypeKey];
}

- (void)authorizeWithView:(UIViewController *)authorizeViewController
        completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler {
    self.loginCompletionHandler = completionHandler;
    
    if ([[self getTokenType] length] > 0 && [[self getAccessToken] length] > 0) {
        [self completeLoginWithResult:[self getAccessToken] error:nil];
    }
    
    NSMutableString *missingParams = [NSMutableString new];
    
    if ([self.identityURI length] == 0) {
        [missingParams appendString:@"identityURI "];
    }
    
    if ([self.restApiURI length] == 0) {
        [missingParams appendString:@"restApiURI "];
    }
    
    if ([self.clientID length] == 0) {
        [missingParams appendString:@"clientID "];
    }
    
    if ([self.clientSecret length] == 0) {
        [missingParams appendString:@"clientSecret "];
    }
    
    if ([missingParams length] > 0) {
        NSString *message = [NSString stringWithFormat:@"Missing parameter(s): %@", missingParams];
        [self completeLoginWithResult:nil error:[NSError errorWithDomain:AWSAuthorizationManagerErrorDomain
                                                                    code:AWSAuthorizationErrorMissingRequiredParameter
                                                                userInfo:@{@"message": message}]];
    }
    
    NSString *urlString = [NSString stringWithFormat:@"%@/oauth/token?grant_type=client_credentials&client_id=%@&client_secret=%@", self.identityURI, self.clientID, self.clientSecret];
    NSURLRequest *urlRequest = [[NSURLRequest alloc] initWithURL:[NSURL URLWithString:urlString]];
    
    __weak AWSMarketoAuthorizationManager *weakSelf = self;
    
    [NSURLConnection sendAsynchronousRequest:urlRequest queue:[NSOperationQueue mainQueue] completionHandler:^(NSURLResponse * _Nullable response, NSData * _Nullable data, NSError * _Nullable connectionError) {
        if (connectionError) {
            AWSLogVerbose(@"Error: %@", connectionError.description);
            [weakSelf completeLoginWithResult:nil error:[NSError errorWithDomain:AWSAuthorizationManagerErrorDomain
                                                                            code:AWSAuthorizationErrorConnectionError
                                                                        userInfo:@{@"connectionError": connectionError}]];
            return;
        }
        
        NSError *parseError;
        weakSelf.valuesFromResponse = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];
        NSString *accessToken = [weakSelf.valuesFromResponse objectForKey:AWSMarketoAuthorizationManagerAccessTokenKey];
        if (accessToken) {
            [weakSelf completeLoginWithResult:accessToken error:nil];
        } else {
            [weakSelf completeLoginWithResult:nil error:[NSError errorWithDomain:AWSAuthorizationManagerErrorDomain
                                                                                    code:AWSAuthorizationErrorFailedToRetrieveAccessToken
                                                                                userInfo:@{@"parseError": parseError}]];
        }
        
        if (data) {
            NSString *responseString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
            AWSLogVerbose(@"Received response from Marketo: %@", responseString);
        }
    }];
}

- (NSURL *)generateLogoutURL {
    return nil;
}

- (void)clearAccessToken {
    [super clearAccessToken];
    
    self.valuesFromResponse = nil;
}

@end
